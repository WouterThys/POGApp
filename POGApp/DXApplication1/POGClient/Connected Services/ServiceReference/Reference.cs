//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POGClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPOGService", CallbackContract=typeof(POGClient.ServiceReference.IPOGServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPOGService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Connect", ReplyAction="http://tempuri.org/IPOGService/ConnectResponse")]
        bool Connect(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Connect", ReplyAction="http://tempuri.org/IPOGService/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Say")]
        void Say(Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Say")]
        System.Threading.Tasks.Task SayAsync(Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Whisper")]
        void Whisper(Common.Message msg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(Common.Message msg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/IsWriting")]
        void IsWriting(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/IsWriting")]
        System.Threading.Tasks.Task IsWritingAsync(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/SendFile", ReplyAction="http://tempuri.org/IPOGService/SendFileResponse")]
        bool SendFile(Common.FileMessage fileMsg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/SendFile", ReplyAction="http://tempuri.org/IPOGService/SendFileResponse")]
        System.Threading.Tasks.Task<bool> SendFileAsync(Common.FileMessage fileMsg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPOGService/Disconnect")]
        void Disconnect(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IPOGService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(Common.Client client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPOGServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/RefreshClients")]
        void RefreshClients(System.Collections.Generic.List<Common.Client> clients);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Receive")]
        void Receive(Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/ReceiveWhisper")]
        void ReceiveWhisper(Common.Message msg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/IsWritingCallback")]
        void IsWritingCallback(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/ReceiverFile")]
        void ReceiverFile(Common.FileMessage fileMsg, Common.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/UserJoin")]
        void UserJoin(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/UserLeave")]
        void UserLeave(Common.Client client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPOGServiceChannel : POGClient.ServiceReference.IPOGService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class POGServiceClient : System.ServiceModel.DuplexClientBase<POGClient.ServiceReference.IPOGService>, POGClient.ServiceReference.IPOGService {
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(Common.Client client) {
            return base.Channel.Connect(client);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(Common.Client client) {
            return base.Channel.ConnectAsync(client);
        }
        
        public void Say(Common.Message msg) {
            base.Channel.Say(msg);
        }
        
        public System.Threading.Tasks.Task SayAsync(Common.Message msg) {
            return base.Channel.SayAsync(msg);
        }
        
        public void Whisper(Common.Message msg, Common.Client receiver) {
            base.Channel.Whisper(msg, receiver);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(Common.Message msg, Common.Client receiver) {
            return base.Channel.WhisperAsync(msg, receiver);
        }
        
        public void IsWriting(Common.Client client) {
            base.Channel.IsWriting(client);
        }
        
        public System.Threading.Tasks.Task IsWritingAsync(Common.Client client) {
            return base.Channel.IsWritingAsync(client);
        }
        
        public bool SendFile(Common.FileMessage fileMsg, Common.Client receiver) {
            return base.Channel.SendFile(fileMsg, receiver);
        }
        
        public System.Threading.Tasks.Task<bool> SendFileAsync(Common.FileMessage fileMsg, Common.Client receiver) {
            return base.Channel.SendFileAsync(fileMsg, receiver);
        }
        
        public void Disconnect(Common.Client client) {
            base.Channel.Disconnect(client);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(Common.Client client) {
            return base.Channel.DisconnectAsync(client);
        }
    }
}
