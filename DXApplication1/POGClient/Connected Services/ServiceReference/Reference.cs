//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POGClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPOGService", CallbackContract=typeof(POGClient.ServiceReference.IPOGServiceCallback))]
    public interface IPOGService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Register", ReplyAction="http://tempuri.org/IPOGService/RegisterResponse")]
        void Register(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Register", ReplyAction="http://tempuri.org/IPOGService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/UnRegister", ReplyAction="http://tempuri.org/IPOGService/UnRegisterResponse")]
        void UnRegister(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/UnRegister", ReplyAction="http://tempuri.org/IPOGService/UnRegisterResponse")]
        System.Threading.Tasks.Task UnRegisterAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Connect", ReplyAction="http://tempuri.org/IPOGService/ConnectResponse")]
        void Connect(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Connect", ReplyAction="http://tempuri.org/IPOGService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(Common.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Disconnect", ReplyAction="http://tempuri.org/IPOGService/DisconnectResponse")]
        void Disconnect(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Disconnect", ReplyAction="http://tempuri.org/IPOGService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetWouter", ReplyAction="http://tempuri.org/IPOGService/GetWouterResponse")]
        Common.Client GetWouter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetWouter", ReplyAction="http://tempuri.org/IPOGService/GetWouterResponse")]
        System.Threading.Tasks.Task<Common.Client> GetWouterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetCharlotte", ReplyAction="http://tempuri.org/IPOGService/GetCharlotteResponse")]
        Common.Client GetCharlotte();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetCharlotte", ReplyAction="http://tempuri.org/IPOGService/GetCharlotteResponse")]
        System.Threading.Tasks.Task<Common.Client> GetCharlotteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetMessages", ReplyAction="http://tempuri.org/IPOGService/GetMessagesResponse")]
        System.Collections.Generic.List<Common.Message> GetMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/GetMessages", ReplyAction="http://tempuri.org/IPOGService/GetMessagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Message>> GetMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Say", ReplyAction="http://tempuri.org/IPOGService/SayResponse")]
        void Say(Common.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPOGService/Say", ReplyAction="http://tempuri.org/IPOGService/SayResponse")]
        System.Threading.Tasks.Task SayAsync(Common.Message msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPOGServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/RefreshClients")]
        void RefreshClients(Common.Client cClient, Common.Client wClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPOGService/Receive")]
        void Receive(Common.Message msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPOGServiceChannel : POGClient.ServiceReference.IPOGService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class POGServiceClient : System.ServiceModel.DuplexClientBase<POGClient.ServiceReference.IPOGService>, POGClient.ServiceReference.IPOGService {
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public POGServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(long id) {
            base.Channel.Register(id);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(long id) {
            return base.Channel.RegisterAsync(id);
        }
        
        public void UnRegister(long id) {
            base.Channel.UnRegister(id);
        }
        
        public System.Threading.Tasks.Task UnRegisterAsync(long id) {
            return base.Channel.UnRegisterAsync(id);
        }
        
        public void Connect(Common.Client client) {
            base.Channel.Connect(client);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(Common.Client client) {
            return base.Channel.ConnectAsync(client);
        }
        
        public void Disconnect(long id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(long id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public Common.Client GetWouter() {
            return base.Channel.GetWouter();
        }
        
        public System.Threading.Tasks.Task<Common.Client> GetWouterAsync() {
            return base.Channel.GetWouterAsync();
        }
        
        public Common.Client GetCharlotte() {
            return base.Channel.GetCharlotte();
        }
        
        public System.Threading.Tasks.Task<Common.Client> GetCharlotteAsync() {
            return base.Channel.GetCharlotteAsync();
        }
        
        public System.Collections.Generic.List<Common.Message> GetMessages() {
            return base.Channel.GetMessages();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Message>> GetMessagesAsync() {
            return base.Channel.GetMessagesAsync();
        }
        
        public void Say(Common.Message msg) {
            base.Channel.Say(msg);
        }
        
        public System.Threading.Tasks.Task SayAsync(Common.Message msg) {
            return base.Channel.SayAsync(msg);
        }
    }
}
